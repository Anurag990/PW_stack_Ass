package Stack;import java.util.*;public class ques1 {    public static int maximalRectangle(char[][] matrix) {        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {            return 0;        }        int rows = matrix.length;        int cols = matrix[0].length;        int[] heights = new int[cols];        int maxArea = 0;        for (int i = 0; i < rows; i++) {            for (int j = 0; j < cols; j++) {                // Update the height for the current row                heights[j] = matrix[i][j] == '1' ? heights[j] + 1 : 0;            }            // Calculate the largest rectangle in the histogram for the current row            maxArea = Math.max(maxArea, largestRectangleArea(heights));        }        return maxArea;    }    private static int largestRectangleArea(int[] heights) {        Stack<Integer> stack = new Stack<>();        int maxArea = 0;        for (int i = 0; i <= heights.length; i++) {            int currentHeight = (i == heights.length) ? 0 : heights[i];            while (!stack.isEmpty() && currentHeight < heights[stack.peek()]) {                int height = heights[stack.pop()];                int width = stack.isEmpty() ? i : i - stack.peek() - 1;                maxArea = Math.max(maxArea, height * width);            }            stack.push(i);        }        return maxArea;    }    public static void main(String[] args) {        char[][] matrix = {                {'1', '0', '1', '0', '0'},                {'1', '0', '1', '1', '1'},                {'1', '1', '1', '1', '1'},                {'1', '0', '0', '1', '0'}        };        int result = maximalRectangle(matrix);        System.out.println("Largest rectangle area: " + result);    }}